/**
 * Common Webhook Base Component
 * @description Base component for webhook sources
 */

import { ConfigurationError } from "@pipedream/platform";

export default {
  props: {
    {{app}}: {
      type: "app",
      app: "{{app}}",
    },
    db: "$.service.db",
    http: "$.interface.http",
  },
  methods: {
    /**
     * Get webhook ID from the database
     */
    _getWebhookId() {
      return this.db.get("webhookId");
    },
    
    /**
     * Set webhook ID in the database
     */
    _setWebhookId(webhookId) {
      this.db.set("webhookId", webhookId);
    },
    
    /**
     * Define which webhook events to listen for
     * @abstract
     */
    getWebhookEvents() {
      throw new Error("getWebhookEvents is not implemented");
    },
    
    /**
     * Generate metadata for the event
     * @abstract
     */
    generateMeta(event) {
      throw new Error("generateMeta is not implemented");
    },
    
    /**
     * Create a webhook
     */
    async createWebhook() {
      if (this._getWebhookId()) {
        await this.removeWebhook();
      }
      
      // Implement webhook creation with your app
      const response = await this.{{app}}.createWebhook({
        endpoint: this.http.endpoint,
        events: this.getWebhookEvents(),
      });
      
      this._setWebhookId(response.id);
    },
    
    /**
     * Remove a webhook
     */
    async removeWebhook(webhookId = this._getWebhookId()) {
      if (webhookId) {
        await this.{{app}}.removeWebhook(webhookId);
        this._setWebhookId(null);
      }
    },
  },
  hooks: {
    async activate() {
      await this.createWebhook();
    },
    async deactivate() {
      await this.removeWebhook();
    },
  },
  async run(event) {
    const { body } = event;
    
    // Emit the webhook data
    this.$emit(body, this.generateMeta(body));
  },
};
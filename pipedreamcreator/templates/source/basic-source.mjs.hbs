/**
 * {{name}}
 * @description {{description}}
 * @created {{date}}
 */

import { ConfigurationError } from "@pipedream/platform";

export default {
  key: "{{key}}",
  name: "{{name}}",
  description: "{{description}}",
  version: "{{version}}",
  type: "source",
  props: {
    // Common props
    {{app}}: {
      type: "app",
      app: "{{app}}",
    },
    // Define additional props here
    timer: {
      type: "$.interface.timer",
      label: "Polling Schedule",
      description: "How often to poll for new events",
      default: {
        intervalSeconds: 60 * 15, // 15 minutes
      },
    },
  },
  hooks: {
    async deploy() {
      // Optional: Retrieve historical data on deployment
      const events = await this.getHistoricalEvents(10);
      
      for (const event of events) {
        this.emitEvent(event);
      }
    },
  },
  methods: {
    /**
     * Get historical events (optional)
     * @param {number} max - Maximum number of events to retrieve
     */
    async getHistoricalEvents(max) {
      // Implement historical data retrieval here
      return [];
    },
    
    /**
     * Emit an event
     * @param {object} event - Event data to emit
     */
    emitEvent(event) {
      const meta = this.generateMeta(event);
      this.$emit(event, meta);
    },
    
    /**
     * Generate metadata for an event
     * @param {object} event - Event data
     */
    generateMeta(event) {
      return {
        id: event.id || `${event.name}_${Date.now()}`,
        summary: `New event: ${event.name || "Unnamed event"}`,
        ts: event.created_at ? Date.parse(event.created_at) : Date.now(),
      };
    },
  },
  async run() {
    // Implement the run method to fetch new data
    try {
      // Example: Fetch data from API
      // const data = await this.{{app}}.fetchNewData();
      
      // For each item, emit an event
      // for (const item of data) {
      //   this.emitEvent(item);
      // }
      
      // Replace this with actual implementation
      const mockEvents = [
        {
          id: "sample1",
          name: "Sample Event",
          created_at: new Date().toISOString(),
          data: {
            sample: "data",
          },
        }
      ];
      
      for (const event of mockEvents) {
        this.emitEvent(event);
      }
    } catch (error) {
      console.error("Error fetching data:", error);
      throw error;
    }
  },
};